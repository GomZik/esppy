#!/usr/bin/env python3

import os
import sys
import argparse
from multiprocessing import cpu_count
from esppy.pid import Pid
from esppy.supervisor import Supervisor
from random import choice
from string import ascii_letters as letters


def make_cookie():
    result = []
    for i in range(8):
        result.append(choice(letters))

    return ''.join(result)


class ConfigurationError(Exception):
    pass


parser = argparse.ArgumentParser()
parser.add_argument('file')
parser.add_argument('--slave', action='store_true', default=False)
parser.add_argument('-w', '--workers', default=cpu_count(), type=int)
parser.add_argument('-p', '--port', default=32592, type=int)
parser.add_argument('-c', '--cookie', type=str, default=make_cookie())
parser.add_argument('-d', '--disable-nodes', action='store_true',
                    default=False)
parser.add_argument('--no-web', action='store_true', default=False)
args = parser.parse_args()

if args.slave and args.disable_nodes:
    raise ConfigurationError('--slave and --disable-nodes can\'not used '
                             'together')

print(args)

cwd = os.getcwd()
added_path = os.path.abspath(os.path.join(cwd, os.path.dirname(args.file)))
sys.path = [added_path] + sys.path

supervisor = Supervisor(args)


def _spawn(module_name, function_name, *args, **kwargs):
    """
    Spawn lightweight process (coroutine) on awailable
    (remote or local) worker

    :param module_name:
    """
    return Pid(module_name, function_name, args, kwargs)
__builtins__.spawn = _spawn

supervisor.run()
